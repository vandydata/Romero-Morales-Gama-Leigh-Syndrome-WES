snpeff_data_indel$Gene_Name<-NULL
colnames(snpeff_data_indel)[colnames(snpeff_data_indel)=="url"]<-"Gene_Symbol"
colnames(snpeff_data_indel)[colnames(snpeff_data_indel)=='Gene_description']<-"Gene_Name"
snpeff_indel_firstpass<-snpeff_data_indel[,c(21,18,19,20,17,14:16,1:13)]
write.xlsx(snpeff_indel_firstpass,"Output/snpeff_indel_Gr37.xlsx")
#GeneWiz reproduce report for Indels
genewiz_rereport_indel<-snpeff_indel_firstpass%>%group_by(Gene_Symbol,entrezgene,Gene_Name,
UniProt_ID,number_of_samples_that_have_variant,Ensembl_ID) %>% count()
#write genewiz reproduced report with additional items
write.xlsx(genewiz_rereport_indel,"Output/genewiz_report_snpeff_indel_Gr37.xlsx")
# Set directory
directory <- 'D:/data/2019-051-GamaVivian-VariantCallingAnalysis/manuscript/Deliverable-2/01-snp-indel-circular-plot/'
setwd(directory)
#Loading data and setup----------------
snpeff_gr37_snp_full <- read_csv("Input/snpeff-gr37-snp-full.csv",
col_types = cols(CHROM = col_character()))
snpeff_gr37_indel_full <- read_csv("Input/snpeff-gr37-indel-full.csv",
col_types = cols(CHROM = col_character()))
#libraries---------------
library(BioCircos)
library(tidyverse)
library(readr)
library(biomaRt)
library(scales)
library(shiny)
# Set directory
directory <- 'D:/data/2019-051-GamaVivian-VariantCallingAnalysis/manuscript/Deliverable-2/01-snp-indel-circular-plot/'
setwd(directory)
#Loading data and setup----------------
snpeff_gr37_snp_full <- read_csv("Input/snpeff-gr37-snp-full.csv",
col_types = cols(CHROM = col_character()))
snpeff_gr37_indel_full <- read_csv("Input/snpeff-gr37-indel-full.csv",
col_types = cols(CHROM = col_character()))
#removing MT related rows
snpeff_gr37_snp_fullmod <- snpeff_gr37_snp_full[snpeff_gr37_snp_full$CHROM != 'MT',]
snpeff_gr37_indel_fullmod <- snpeff_gr37_indel_full[snpeff_gr37_indel_full$CHROM != 'MT',]
#subset variants into samples
GM01503 <- snpeff_gr37_snp_fullmod[snpeff_gr37_snp_fullmod$GM01503_hit =='1',]
GM03672 <- snpeff_gr37_snp_fullmod[snpeff_gr37_snp_fullmod$GM03672_hit =='1',]
GM13411 <- snpeff_gr37_snp_fullmod[snpeff_gr37_snp_fullmod$GM13411_hit =='1',]
#cross reference table to convert high qual to low
before <- c(1,2,3,4,5,6,7,8,9,10,11,12)
after <- c(12,11,10,9,8,7,6,5,4,3,2,1)
crossref <- data.frame(before,after)
#Extracting each sample variants chromosome, position and quality score
#rescale the quality scores to ensure data fits within the parameters of the package
#flip flop the values of the quality scores to make the snp tracks go outward instead of  inward
gm15_chr <- GM01503$CHROM
gm15_pos <- GM01503$POS
gm15_value <- GM01503$QUAL
gm15_value_sd <- round(rescale(gm15_value, c(1,12)),0)
idx <- match(gm15_value_sd, crossref$before)
gm15_newvalue <- crossref$after[ idx ]
gm03_chr <- GM03672$CHROM
gm03_pos <- GM03672$POS
gm03_value <- GM03672$QUAL
gm03_value_sd <- round(rescale(gm03_value, c(1,12)),0)
idx <- match(gm03_value_sd, crossref$before)
gm03_newvalue <- crossref$after[ idx ]
gm13_chr <- GM13411$CHROM
gm13_pos <- GM13411$POS
gm13_value <- GM13411$QUAL
gm13_value_sd <- round(rescale(gm13_value, c(1,12)),0)
idx <- match(gm13_value_sd, crossref$before)
gm13_newvalue <- crossref$after[ idx ]
#Map the genes start and end positions to our dataset
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh=37)
genemap <- getBM( attributes = c("ensembl_gene_id", "entrezgene_id", "hgnc_symbol", 'gene_biotype', 'uniprot_gn_id','description','start_position','end_position'),
filters = "ensembl_gene_id",
values = snpeff_gr37_snp_fullmod$Ensembl_ID,
mart = ensembl )
#subset the top 20 genes to map
top20 <- snpeff_gr37_snp_fullmod %>% group_by(Gene_Name,number_of_samples_that_have_variant) %>% count()
top20 <- top20[ top20$number_of_samples_that_have_variant == 3 ,] %>% arrange(desc(n))
top20 <- top20[1:20 ,]
#map the start and end positions of top 20 genes
idx <- match(top20$Gene_Name, genemap$hgnc_symbol)
top20$start <- genemap$start_position[idx]
top20$end <- genemap$end_position[idx]
idx <- match(top20$Gene_Name, snpeff_gr37_snp_fullmod$Gene_Name)
top20$chrom <- snpeff_gr37_snp_fullmod$CHROM[idx]
top20$length <- top20$end-top20$start
top20$chrom <- as.double(top20$chrom)
top20 <- top20 %>% arrange(desc(chrom))
# Arc track values used to show where the genes are
chromosomes <- top20$chrom
start <- top20$start-1000000
end <- top20$end+1000000
#GM01503 (PDH) red color
value <- c(12,11,10,9,8,7,6,5,4,3,2,1)
color <- c("#FF0000","#FF0000","#FF0000",'#DF0101','#DF0101','#DF0101','#B40404','#B40404','#B40404','#8A0808','#8A0808','#8A0808')
colorxross <- data.frame(value,color)
idx <- match(gm15_newvalue, colorxross$value)
colorvalue <- colorxross$color[idx]
colorgm15 <- as.character(colorvalue)
#GM03672 (DLD) green color
value <- c(12,11,10,9,8,7,6,5,4,3,2,1)
color <- c("#00FF00","#00FF00","#00FF00",'#01DF01','#01DF01','#01DF01','#04B404','#04B404','#04B404','#088A08','#088A08','#088A08')
colorxross <- data.frame(value,color)
idx <- match(gm03_newvalue, colorxross$value)
colorvalue <- colorxross$color[idx]
colorgm03 <- as.character(colorvalue)
#GM13411 (MTMT-ATP6) orange color
value <- c(12,11,10,9,8,7,6,5,4,3,2,1)
color <- c("#FF8000","#FF8000","#FF8000",'#B45F04','#B45F04','#B45F04','#8A4B08','#8A4B08','#8A4B08','#2A1B0A','#2A1B0A','#2A1B0A')
colorxross <- data.frame(value,color)
idx <- match(gm13_newvalue, colorxross$value)
colorvalue <- colorxross$color[idx]
colorgm13 <- as.character(colorvalue)
#Set the snps for each sample
tracks = BioCircosSNPTrack("testSNP1", gm15_chr, gm15_pos, gm15_newvalue, colors = colorgm15,
minRadius=0.8,maxRadius = 0.9, range = c(2,12))
tracks = tracks +  BioCircosSNPTrack("testSNP1", gm03_chr, gm03_pos,  gm03_newvalue, colors = colorgm03,
minRadius=0.6,maxRadius = 0.75, range = c(2,12))
tracks = tracks + BioCircosSNPTrack("testSNP1", gm13_chr , gm13_pos, gm13_newvalue, colors = colorgm13,
minRadius=0.45,maxRadius = 0.55, range = c(2,12))
#set background tracks for the snps
tracks = tracks + BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.8, maxRadius = 0.92,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#D8D8D8")
tracks = tracks + BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.6, maxRadius = 0.77,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#D8D8D8")
tracks = tracks + BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.45, maxRadius = 0.58,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#D8D8D8")
#Setting the Arc Track---------------------------------------
tracks = tracks + BioCircosArcTrack("fredTestArc", chromosomes,
starts = start, ends = end,
maxRadius = 1.15, minRadius = 1, color='#000000')
#Labeling the top 20 genes
tracks = tracks + BioCircosTextTrack('myTextTrack', 'HNRNPCL1', size = "0.6em", opacity = 0.8,
x = -.1, y =-1.25)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'IGSF3', size = "0.6em", opacity = 0.8,
x = .3, y =-1.25)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'ANKRD36C', size = "0.6em", opacity = 0.8,
x = .8, y =-0.95)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'FRG2C, ZNF717', size = "0.6em", opacity = 0.8,
x = 1.1, y =-0.5)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'HLA-DRB1', size = "0.6em", opacity = 0.8,
x = 1, y =0.7)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'PRSS3', size = "0.6em", opacity = 0.8,
x = -.1, y =1.25)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'PRSS1, TRBV10-1', size = "0.6em", opacity = 0.8,
x = .3, y =1.23)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'OR8U1', size = "0.6em", opacity = 0.8,
x = -.95, y =1)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'MUC6', size = "0.6em", opacity = 0.8,
x = -.8, y =1.1)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'TAS2R31, TAS2R46', size = "0.6em", opacity = 0.8,
x = -1.3, y =0.85)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'CTDSP2, KRT18', size = "0.6em", opacity = 0.8,
x = -1.43, y =0.7)
tracks = tracks + BioCircosTextTrack('myTextTrack','PABPC3', size = "0.6em", opacity = 0.8,
x = -1.39, y =0.5)
tracks = tracks + BioCircosTextTrack('myTextTrack','CDC27', size = "0.6em", opacity = 0.8,
x = -1.39, y =-.55)
tracks = tracks + BioCircosTextTrack('myTextTrack','HYDIN', size = "0.6em", opacity = 0.8,
x = -1.39, y =-.4)
tracks = tracks + BioCircosTextTrack('myTextTrack','MUC16', size = "0.6em", opacity = 0.8,
x = -1.19, y =-.8)
tracks = tracks + BioCircosTextTrack('myTextTrack','FAM182B', size = "0.6em", opacity = 0.8,
x = -1.0, y =-1)
# Define shiny UI
shinyUi <- fluidPage(
# Import microsoft Sans Serif font
tags$head(
# First load the sans serif font
# Then apply it to the whole BioCircos HTML div id
tags$style(HTML("
@import url('//fonts.googleapis.com/css?family=Microsoft Sans Serif);
",
"#InstanceCircos {font-family: 'Microsoft Sans Serif', cursive;
font-weight: 500; line-height: 1.1;
color: #4d3a7d;}"
))
),
# Set where the circos plot will be displayed
BioCircosOutput("InstanceCircos", width = 746, height=577)
)
# Define shiny server
shinyServer <- function(input, output) {
# Set the parameter of the circos plot
output$InstanceCircos <- renderBioCircos({
# Create a plot with a background track
BioCircos(tracks, genomeFillColor = "Spectral", yChr = T, chrPad = .012, displayGenomeBorder = F,
genomeTicksLen = 3, genomeTicksTextSize = 0, genomeTicksScale = 5000000000,
genomeLabelTextSize = 12, genomeLabelDy = -47, genomeTicksDisplay = F)
})
}
# Start Shiny app
shinyApp(ui = shinyUi, server = shinyServer)
# Subset variants into samples
GM01503 <- snpeff_gr37_indel_fullmod[snpeff_gr37_indel_fullmod$GM01503_hit =='1',]
GM03672 <- snpeff_gr37_indel_fullmod[snpeff_gr37_indel_fullmod$GM03672_hit =='1',]
GM13411 <- snpeff_gr37_indel_fullmod[snpeff_gr37_indel_fullmod$GM13411_hit =='1',]
# Cross reference table to convert high qual to low
before <- c(1,2,3,4,5,6,7,8,9,10,11,12)
after <- c(12,11,10,9,8,7,6,5,4,3,2,1)
crossref <- data.frame(before,after)
# Extracting each sample variants chromosome, position and quality score
# rescale the quality scores to ensure data fits within the parameters of the package
# flip flop the values of the quality scores to make the snp tracks go outward instead of  inward
gm15_chr <- GM01503$CHROM
gm15_pos <- GM01503$POS
gm15_value <- GM01503$QUAL
gm15_value_sd <- round(rescale(gm15_value, c(1,12)),0)
idx <- match(gm15_value_sd, crossref$before)
gm15_newvalue <- crossref$after[ idx ]
gm03_chr <- GM03672$CHROM
gm03_pos <- GM03672$POS
gm03_value <- GM03672$QUAL
gm03_value_sd <- round(rescale(gm03_value, c(1,12)),0)
idx <- match(gm03_value_sd, crossref$before)
gm03_newvalue <- crossref$after[ idx ]
gm13_chr <- GM13411$CHROM
gm13_pos <- GM13411$POS
gm13_value <- GM13411$QUAL
gm13_value_sd <- round(rescale(gm13_value, c(1,12)),0)
idx <- match(gm13_value_sd, crossref$before)
gm13_newvalue <- crossref$after[ idx ]
# Map the genes start and end positions to our dataset
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh=37)
genemap <- getBM( attributes = c("ensembl_gene_id", "entrezgene_id", "hgnc_symbol", 'gene_biotype', 'uniprot_gn_id','description','start_position','end_position'),
filters = "ensembl_gene_id",
values = snpeff_gr37_indel_fullmod$Ensembl_ID,
mart = ensembl )
# Subset the top 20 genes to map
top20 <- snpeff_gr37_indel_fullmod %>% group_by(Gene_Name,number_of_samples_that_have_variant) %>% count()
top20 <- top20[ top20$number_of_samples_that_have_variant == 3 ,] %>% arrange(desc(n))
top20 <- top20[1:20 ,]
idx <- match(top20$Gene_Name, snpeff_gr37_indel_full$Gene_Name)
top20$ensemblid <- snpeff_gr37_indel_full$Ensembl_ID[idx]
# Map the start and end positions of top 20 genes
idx <- match(top20$ensemblid, genemap$ensembl_gene_id)
top20$start <- genemap$start_position[idx]
top20$end <- genemap$end_position[idx]
idx <- match(top20$Gene_Name, snpeff_gr37_indel_fullmod$Gene_Name)
top20$chrom <- snpeff_gr37_indel_fullmod$CHROM[idx]
top20$length <- top20$end-top20$start
top20$chrom <- as.double(top20$chrom)
top20 <- top20 %>% arrange(desc(chrom))
# Arc track values used to show where the genes are
chromosomes <- top20$chrom
start <- top20$start-1000000
end <- top20$end+1000000
# GM01503 (PDH) red color
value <- c(12,11,10,9,8,7,6,5,4,3,2,1)
color <- c("#FF0000","#FF0000","#FF0000",'#DF0101','#DF0101','#DF0101','#B40404','#B40404','#B40404','#8A0808','#8A0808','#8A0808')
colorxross <- data.frame(value,color)
idx <- match(gm15_newvalue, colorxross$value)
colorvalue <- colorxross$color[idx]
colorgm15 <- as.character(colorvalue)
# GM03672 (DLD) green color
value <- c(12,11,10,9,8,7,6,5,4,3,2,1)
color <- c("#00FF00","#00FF00","#00FF00",'#01DF01','#01DF01','#01DF01','#04B404','#04B404','#04B404','#088A08','#088A08','#088A08')
colorxross <- data.frame(value,color)
idx <- match(gm03_newvalue, colorxross$value)
colorvalue <- colorxross$color[idx]
colorgm03 <- as.character(colorvalue)
# GM13411 (MTMT-ATP6) orange color
value <- c(12,11,10,9,8,7,6,5,4,3,2,1)
color <- c("#FF8000","#FF8000","#FF8000",'#B45F04','#B45F04','#B45F04','#8A4B08','#8A4B08','#8A4B08','#2A1B0A','#2A1B0A','#2A1B0A')
colorxross <- data.frame(value,color)
idx <- match(gm13_newvalue, colorxross$value)
colorvalue <- colorxross$color[idx]
colorgm13 <- as.character(colorvalue)
# Set the snps for each sample
tracks = BioCircosSNPTrack("testSNP1", gm15_chr, gm15_pos, gm15_newvalue, colors = colorgm15,
minRadius=0.8,maxRadius = 0.9, range = c(2,12))
tracks = tracks +  BioCircosSNPTrack("testSNP1", gm03_chr, gm03_pos,  gm03_newvalue, colors = colorgm03,
minRadius=0.6,maxRadius = 0.75, range = c(2,12))
tracks = tracks + BioCircosSNPTrack("testSNP1", gm13_chr , gm13_pos, gm13_newvalue, colors = colorgm13,
minRadius=0.45,maxRadius = 0.55, range = c(2,12))
# Set background tracks for the snps
tracks = tracks + BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.8, maxRadius = 0.92,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#D8D8D8")
tracks = tracks + BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.6, maxRadius = 0.77,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#D8D8D8")
tracks = tracks + BioCircosBackgroundTrack("myBackgroundTrack", minRadius = 0.45, maxRadius = 0.58,
borderColors = "#AAAAAA", borderSize = 0.6, fillColors = "#D8D8D8")
# Setting the Arc Track---------------------------------------
tracks = tracks + BioCircosArcTrack("fredTestArc", chromosomes,
starts = start, ends = end,
maxRadius = 1.15, minRadius = 1, color='#000000')
# Labeling the top 20 genes
tracks = tracks + BioCircosTextTrack('myTextTrack', 'UBXN11', size = "0.6em", opacity = 0.8,
x = .00, y =-1.25)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'ALMS1', size = "0.6em", opacity = 0.8,
x = .75, y =-1)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'ANKRD36C', size = "0.6em", opacity = 0.8,
x = .8, y =-0.95)
tracks = tracks + BioCircosTextTrack('myTextTrack','ZNF717', size = "0.6em", opacity = 0.8,
x = 1.1, y =-0.5)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'DSPP', size = "0.6em", opacity = 0.8,
x = 1.2, y =-0.01)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'TRBV10-1', size = "0.6em", opacity = 0.8,
x = .45, y =1.15)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'PRSS3,ADAMTSL1,ARHGAP39', size = "0.6em", opacity = 0.8,
x = -.2, y =1.23)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'MUC6', size = "0.6em", opacity = 0.8,
x = -0.67, y =1.2)
tracks = tracks + BioCircosTextTrack('myTextTrack', 'TAS2R43,ATN1', size = "0.6em", opacity = 0.8,
x = -1.2, y =0.9)
tracks = tracks + BioCircosTextTrack('myTextTrack','PABPC3', size = "0.6em", opacity = 0.8,
x = -1.3, y =.6)
tracks = tracks + BioCircosTextTrack('myTextTrack','IGHJ6', size = "0.6em", opacity = 0.8,
x = -1.39, y =0.12)
tracks = tracks + BioCircosTextTrack('myTextTrack','HYDIN', size = "0.6em", opacity = 0.8,
x = -1.35, y =-.3)
tracks = tracks + BioCircosTextTrack('myTextTrack','CDC27', size = "0.6em", opacity = 0.8,
x = -1.3, y =-.5)
tracks = tracks + BioCircosTextTrack('myTextTrack','MUC16', size = "0.6em", opacity = 0.8,
x = -1.15, y =-.8)
shinyApp(ui = shinyUi, server = shinyServer)
# Define shiny UI
shinyUi <- fluidPage(
# Import microsoft Sans Serif font
tags$head(
# First load the sans serif font
# Then apply it to the whole BioCircos HTML div id
tags$style(HTML("
@import url('//fonts.googleapis.com/css?family=Microsoft Sans Serif);
",
"#InstanceCircos {font-family: 'Microsoft Sans Serif', cursive;
font-weight: 500; line-height: 1.1;
color: #4d3a7d;}"
))
),
# Set where the circos plot will be displayed
BioCircosOutput("InstanceCircos", width = 746, height=577)
)
# Define shiny server
shinyServer <- function(input, output) {
# Set the parameter of the circos plot
output$InstanceCircos <- renderBioCircos({
# Create a plot with a background track
BioCircos(tracks, genomeFillColor = "Spectral", yChr = T, chrPad = .012, displayGenomeBorder = F,
genomeTicksLen = 3, genomeTicksTextSize = 0, genomeTicksScale = 5000000000,
genomeLabelTextSize = 12, genomeLabelDy = -47, genomeTicksDisplay = F)
})
}
# Start Shiny app
shinyApp(ui = shinyUi, server = shinyServer)
View(top20)
View(top20)
# Start Shiny app
shinyApp(ui = shinyUi, server = shinyServer)
# Directory setup
directory <- 'D:/data/2019-051-GamaVivian-VariantCallingAnalysis/manuscript/Deliverable-2/06-snp-circular-chromosome-mito-plot/'
setwd(directory)
#libraries
library(readr)
library(BioCircos)
library(tidyverse)
library(data.table)
library(shiny)
# Directory setup
directory <- 'D:/data/2019-051-GamaVivian-VariantCallingAnalysis/manuscript/Deliverable-2/06-snp-circular-chromosome-mito-plot/'
setwd(directory)
#Loading data and setup----------------
snpeff_gr37_snp_full <- read_csv("Input/snpeff-gr37-snp-full.csv",
col_types = cols(CHROM = col_character()))
#snpeff_gr37_indel_full <- read_csv("D:/data/2019-051-GamaVivian-VariantCallingAnalysis/data/snpeff-gr37-indel-full.csv",
#                                   col_types = cols(CHROM = col_character()))
crossref <- read_csv("Input/data/crossref.csv")
# Directory setup
directory <- 'D:/data/2019-051-GamaVivian-VariantCallingAnalysis/manuscript/Deliverable-2/06-snp-circular-chromosome-mito-plot/'
setwd(directory)
#Loading data and setup----------------
snpeff_gr37_snp_full <- read_csv("Input/snpeff-gr37-snp-full.csv",
col_types = cols(CHROM = col_character()))
#snpeff_gr37_indel_full <- read_csv("D:/data/2019-051-GamaVivian-VariantCallingAnalysis/data/snpeff-gr37-indel-full.csv",
#                                   col_types = cols(CHROM = col_character()))
crossref <- read_csv("Input/crossref.csv")
color_ref <- read_csv("Input/color_ref.csv")
#removing non-MT related rows
snpeff_gr37_snp_fullmod <- snpeff_gr37_snp_full[snpeff_gr37_snp_full$CHROM == 'MT',]
#for snps mitochondria
#subset variants into samples
GM01503 <- snpeff_gr37_snp_fullmod[snpeff_gr37_snp_fullmod$GM01503_hit =='1',]
GM03672 <- snpeff_gr37_snp_fullmod[snpeff_gr37_snp_fullmod$GM03672_hit =='1',]
GM13411 <- snpeff_gr37_snp_fullmod[snpeff_gr37_snp_fullmod$GM13411_hit =='1',]
#GM01503
gm15_pos <- GM01503$`POS`
gm15_chr <- GM01503$Gene_Name
gm15_chr <- substring(gm15_chr, 4)
gm15_mut <- GM01503$Annotation_Impact
gm15 <- data.frame(chr = gm15_chr,
pos = gm15_pos,
mut = gm15_mut)
#matching the gene start and end and the length of the gene to table
idx <- match( gm15$chr, crossref$Gene)
gm15$str <- crossref$start[ idx ]
gm15$end <- crossref$end[ idx ]
gm15$chr_length <- crossref$chr_length[ idx ]
#changing the values of SNP based on the length of the gene in the genome
#because the control region is split up (one section is at the beginning
#of the genome and the other half is at the end), we are keeping the pos value that are under 576 nt
#and changing the values for the other SNPS
gm15$snppos <- ifelse(gm15$pos< 576, gm15$pos, gm15$chr_length-(gm15$end-gm15$pos))
gm15_2 <- subset(gm15, !is.na(str))
idx <- match( gm15_2$mut, color_ref$Mut)
gm15_2$color <- color_ref$gm15color[ idx ]
gm15_2$value <- color_ref$value[ idx ]
gm15_delet <- gm15_2[gm15_2$mut =='MODERATE',]
gm15_delet$chr <- as.character(gm15_delet$chr)
#GM03572
gm03_pos <- GM03672$`POS`
gm03_chr <- GM03672$Gene_Name
gm03_chr <- substring(gm03_chr, 4)
gm03_mut <- GM03672$Annotation_Impact
gm03 <- data.frame(chr = gm03_chr,
pos = gm03_pos,
mut = gm03_mut)
#matching the gene start and end and the length of the gene to table
idx <- match( gm03$chr, crossref$Gene)
gm03$str <- crossref$start[ idx ]
gm03$end <- crossref$end[ idx ]
gm03$chr_length <- crossref$chr_length[ idx ]
#changing the values of SNP based on the length of the gene in the genome
#because the control region is split up (one section is at the beginning
#of the genome and the other half is at the end), we are keeping the pos value that are under 576 nt
#and changing the values for the other
gm03$snppos <- ifelse(gm03$pos< 576, gm03$pos, gm03$chr_length-(gm03$end-gm03$pos))
gm03_2 <- subset(gm03, !is.na(str))
idx <- match( gm03_2$mut, color_ref$Mut)
gm03_2$color <- color_ref$gm03color[ idx ]
gm03_2$value <- color_ref$value[ idx ]
gm03_delet <- gm03_2[gm03_2$mut=='MODERATE',]
gm03_delet$chr <- as.character(gm03_delet$chr)
#GM13411
gm13_pos <- GM13411$`POS`
gm13_chr <- GM13411$Gene_Name
gm13_chr <- substring(gm13_chr, 4)
gm13_mut <- GM13411$Annotation_Impact
gm13 <- data.frame(chr = gm13_chr,
pos = gm13_pos,
mut = gm13_mut)
#matching the gene start and end and the length of the gene to table
idx <- match( gm13$chr, crossref$Gene)
gm13$str <- crossref$start[ idx ]
gm13$end <- crossref$end[ idx ]
gm13$chr_length <- crossref$chr_length[ idx ]
#changing the values of SNP based on the length of the gene in the genome
#because the control region is split up (one section is at the beginning
#of the genome and the other half is at the end), we are keeping the pos value that are under 576 nt
#and changing the values for the other
gm13$snppos <- ifelse(gm13$pos< 576, gm13$pos, gm13$chr_length-(gm13$end-gm13$pos))
gm13_2 <- subset(gm13, !is.na(str))
idx <- match( gm13_2$mut, color_ref$Mut)
gm13_2$color <- color_ref$gm13color[ idx ]
gm13_2$value <- color_ref$value[ idx ]
gm13_delet <- gm13_2[gm13_2$mut=='MODERATE',]
gm13_delet$chr <- as.character(gm13_delet$chr)
#BioCircos
myGenome = list("Control Region" = 1122,
"12S" = 954,
"16S" = 1559,
"ND1" = 956,
"ND2" = 1042,
"CO1" = 1542,
"CO2" = 684,
"ATP8" = 207,
"ATP6" = 681,
"CO3" = 784,
"ND3" = 346,
"ND4L" = 297,
"ND4" = 1378,
"ND5" = 1812,
"ND6" = 525,
"CYB" = 1141)
#Note: Each sample track has two tracks. One track is to plot all the SNPS and the other one titled
#"Highlight" overlaps points from the first track to indicate this SNP is a deletion mutation
#GM01503 SNP tracks
tracklist = BioCircosSNPTrack('mySNPTrack',as.character(gm15_2$chr),gm15_2$snppos,gm15_2$value, colors = gm15_2$color, minRadius = 0.85, maxRadius = 0.95, range=c(0,12), shape = c('circle'))
tracklist = tracklist + BioCircosSNPTrack('Highlight', gm15_delet$chr, gm15_delet$snppos, gm15_delet$value, colors = gm15_delet$color, minRadius=0.85, maxRadius = 0.95, shape='circle', size = 6, range = c(0,12))
#GM03672 SNP tracks
tracklist = tracklist + BioCircosSNPTrack('mySNPTrack',as.character(gm03_2$chr),gm03_2$snppos,gm03_2$value, colors = gm03_2$color, minRadius = 0.7, maxRadius = 0.8, range=c(0,12))
tracklist = tracklist + BioCircosSNPTrack('Highlight', gm03_delet$chr, gm03_delet$snppos, gm03_delet$value, colors = gm03_delet$color, minRadius=0.7, maxRadius = 0.8, shape='circle', size = 6, range = c(0,12))
#GM13411 SNP tracks
tracklist = tracklist + BioCircosSNPTrack('mySNPTrack',as.character(gm13_2$chr),gm13_2$snppos,gm13_2$value, colors = gm13_2$color, minRadius = 0.55, maxRadius = 0.65, range=c(0,12))
tracklist = tracklist + BioCircosSNPTrack('Highlight', gm13_delet$chr, gm13_delet$snppos, gm13_delet$value, colors = gm13_delet$color, minRadius=0.55, maxRadius = 0.65, shape='circle', size = 6, range = c(0,12))
#Background tracks for SNP tracks
tracklist = tracklist + BioCircosBackgroundTrack('GM15030',fillColors = '#EDF1EC',minRadius = 0.85, maxRadius = 0.95)
tracklist = tracklist + BioCircosBackgroundTrack('GM03672',fillColors = '#EDF1EC',minRadius = 0.7, maxRadius = 0.8)
tracklist = tracklist + BioCircosBackgroundTrack('GM13411',fillColors = '#EDF1EC',minRadius = 0.55, maxRadius = 0.65)
# Define shiny UI
shinyUi <- fluidPage(
# Import microsoft Sans Serif font
tags$head(
# First load the sans serif font
# Then apply it to the whole BioCircos HTML div id
tags$style(HTML("
@import url('//fonts.googleapis.com/css?family=Microsoft Sans Serif);
",
"#InstanceCircos {font-family: 'Microsoft Sans Serif', cursive;
font-weight: 500; line-height: 1.1;
color: #4d3a7d;}"
))
),
# Set where the circos plot will be displayed
BioCircosOutput("InstanceCircos", width = 746, height=577)
)
# Define shiny server
shinyServer <- function(input, output) {
# Set the parameter of the circos plot
output$InstanceCircos <- renderBioCircos({
# Create a plot with a background track
BioCircos(tracklist,genome = myGenome, genomeFillColor = "Blues",
genomeTicksScale = 50000000, genomeTicksDisplay = F)
})
}
# Start Shiny app
shinyApp(ui = shinyUi, server = shinyServer)
